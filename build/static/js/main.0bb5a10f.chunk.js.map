{"version":3,"sources":["assets/img/LinkSaver-logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Link","props","Navbar","className","NavbarBrand","href","link","content","target","title","Nav","navbar","NavItem","NavLink","onClick","onDelete","App","add","headers","Headers","JSON","stringify","append","fetch","mode","method","body","then","response","json","setState","links","state","catch","error","console","log","setModalLive","modalLive","test","bind","show","id","this","filter","e","preventDefault","value","expand","Container","src","svglogo","map","alink","key","remove","Modal","toggle","isOpen","aria-label","type","aria-hidden","Form","onSubmit","FormGroup","Input","Button","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0bb5a10f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LinkSaver-logo.79a75efd.svg\";","import React from \"react\";\nimport \"./assets/css/bootstrap.min.css\";\nimport \"./assets/css/now-ui-kit.css\";\nimport svglogo from \"./assets/img/LinkSaver-logo.svg\";\nimport SVG from \"react-inlinesvg\";\nimport {\n  Button,\n  Modal,\n  Form,\n  FormGroup,\n  Input,\n  Nav,\n  Navbar,\n  NavItem,\n  NavLink,\n  Container,\n  NavbarBrand\n} from \"reactstrap\";\n\nconst Link = props => (\n  <div>\n    <Navbar className='navbar-transparent row-link'>\n      <NavbarBrand href={props.link.content} target='_blank'>\n        {props.link.title}\n      </NavbarBrand>\n\n      <Nav className='ml-auto' navbar>\n        <NavItem className='active'>\n          <NavLink href='#' onClick={props.onDelete}>\n            <i className='now-ui-icons ui-1_simple-remove text-danger'></i>\n          </NavLink>\n        </NavItem>\n      </Nav>\n    </Navbar>\n  </div>\n);\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      links: [],\n      modalLive: false,\n      setModalLive: false\n    };\n    this.test = this.test.bind(this);\n    this.show();\n  }\n\n  show() {\n    let headers = new Headers();\n\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"Accept\", \"application/json\");\n\n    fetch(\"http://maimien.me:9000/saves/get\", {\n      mode: \"cors\",\n      method: \"GET\",\n      headers: headers\n    })\n      .then(response => response.json())\n      .then(response =>\n        this.setState({\n          links: response\n        })\n      )\n      .catch(error => console.log(\"error\", error));\n  }\n\n  add = (title, content) => {\n    let headers = new Headers();\n\n    let link = JSON.stringify({ title: title, content: content });\n\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"Accept\", \"application/json\");\n\n    fetch(\"http://maimien.me:9000/saves/add\", {\n      mode: \"cors\",\n      method: \"POST\",\n      headers: headers,\n      body: link\n    })\n      .then(response => response.json())\n      .then(response =>\n        this.setState({\n          links: [...this.state.links, response]\n        })\n      )\n      .catch(error => console.log(\"error\", error));\n  };\n\n  remove(id) {\n    let headers = new Headers();\n\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"Accept\", \"application/json\");\n\n    fetch(\"http://maimien.me:9000/saves/delete/\" + id, {\n      mode: \"cors\",\n      method: \"POST\",\n      headers: headers\n    }).catch(error => console.log(\"error\", error));\n\n    this.setState({\n      links: this.state.links.filter(link => link.id !== id)\n    });\n  }\n\n  setModalLive = () => {\n    if (this.state.modalLive)\n      this.setState({\n        modalLive: false\n      });\n    else {\n      this.setState({\n        modalLive: true\n      });\n    }\n  };\n\n  test(e) {\n    e.preventDefault();\n    const title = e.target[0].value;\n    const content = e.target[1].value;\n    this.add(title, content);\n    this.setModalLive();\n  }\n\n  render() {\n    return (\n      <div className='link-list'>\n        <Navbar className='navbar-transparent' expand='lg'>\n          <Container>\n            <div className='navbar-translate'>\n              <NavbarBrand>\n                <SVG className='logo' src={svglogo} />\n              </NavbarBrand>\n            </div>\n\n            <Nav className='ml-auto' navbar>\n              <NavItem className='active'>\n                <NavLink href='#' onClick={() => this.setModalLive()}>\n                  <i className='now-ui-icons ui-1_simple-add add-button'></i>\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Container>\n        </Navbar>\n\n        {this.state.links.map(alink => (\n          <Link\n            key={alink.id}\n            onDelete={() => this.remove(alink.id)}\n            link={alink}\n          ></Link>\n        ))}\n\n        <Modal toggle={() => this.setModalLive()} isOpen={this.state.modalLive}>\n          <div className='modal-header'>\n            <h5 className='modal-title' id='exampleModalLiveLabel'>\n              Add new Link\n            </h5>\n            <button\n              aria-label='Close'\n              className='close'\n              type='button'\n              onClick={() => this.setModalLive()}\n            >\n              <span aria-hidden={true}>Ã—</span>\n            </button>\n          </div>\n          <Form onSubmit={this.test}>\n            <FormGroup>\n              <div className='modal-body'>\n                <label>Title</label>\n                <Input className='form-control-success' type='text'></Input>\n                <br />\n                <label>Link</label>\n                <Input className='form-control-success' type='text'></Input>\n              </div>\n              <div className='modal-footer'>\n                <Button\n                  color='secondary'\n                  type='button'\n                  onClick={() => this.setModalLive()}\n                >\n                  Close\n                </Button>\n                <Button color='primary'>Add</Button>\n              </div>\n            </FormGroup>\n          </Form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/bootstrap.min.css\";\nimport \"./assets/css/now-ui-kit.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}