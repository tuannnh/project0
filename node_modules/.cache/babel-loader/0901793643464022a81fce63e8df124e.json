{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n\nimport * as React from 'react';\nimport { noTextChildNodes, possibleStandardNames, styleToObject } from './helpers';\n\nfunction parseAttributes(node, reactKey) {\n  var attributes = {\n    key: reactKey\n  };\n  /* istanbul ignore else */\n\n  if (node instanceof Element) {\n    var nodeClassNames = node.getAttribute('class');\n\n    if (nodeClassNames) {\n      attributes.className = nodeClassNames;\n    }\n\n    __spread(node.attributes).forEach(function (d) {\n      switch (d.name) {\n        // these are manually handled above, so break;\n        case 'class':\n          break;\n\n        case 'style':\n          attributes[d.name] = styleToObject(d.value);\n          break;\n\n        case 'checked':\n        case 'disabled':\n        case 'selected':\n        case 'autoplay':\n        case 'controls':\n          attributes[d.name] = d.name;\n          break;\n\n        default:\n          attributes[possibleStandardNames[d.name] || d.name] = d.value;\n      }\n    });\n  }\n\n  return attributes;\n}\n\nfunction parseChildren(childNodeList, level, options) {\n  var children = __spread(childNodeList).map(function (node, index) {\n    return convertFromNode(node, __assign(__assign({}, options), {\n      index: index,\n      level: level + 1\n    }));\n  }).filter(Boolean);\n\n  if (!children.length) {\n    return null;\n  }\n\n  return children;\n}\n\nfunction parseName(nodeName) {\n  if (/[a-z]+[A-Z]+[a-z]+/.test(nodeName)) {\n    return nodeName;\n  }\n\n  return nodeName.toLowerCase();\n}\n\nexport function convertFromNode(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!input || !(input instanceof Node)) {\n    return null;\n  }\n\n  var _a = options.actions,\n      actions = _a === void 0 ? [] : _a,\n      _b = options.index,\n      index = _b === void 0 ? 0 : _b,\n      _c = options.level,\n      level = _c === void 0 ? 0 : _c;\n  var node = input;\n  var key = level + \"-\" + index;\n  var result = [];\n  /* istanbul ignore else */\n\n  if (Array.isArray(actions)) {\n    actions.forEach(function (action) {\n      if (action.condition(node, key, level)) {\n        if (typeof action.pre === 'function') {\n          node = action.pre(node, key, level);\n\n          if (!(node instanceof Node)) {\n            node = input;\n            /* istanbul ignore else */\n\n            if (process.env.NODE_ENV !== 'production') {\n              // eslint-disable-next-line no-console\n              console.warn('The `pre`-method always must return a valid DomNode (instanceof Node) - your modification will be ignored (Hint: if you want to render a React-component, use the `action`-method instead)');\n            }\n          }\n        }\n\n        if (typeof action.post === 'function') {\n          result.push(action.post(node, key, level));\n        }\n      }\n    });\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  switch (node.nodeType) {\n    case 1:\n      {\n        // regular dom-node\n        return React.createElement(parseName(node.nodeName), parseAttributes(node, key), parseChildren(node.childNodes, level, options));\n      }\n\n    case 3:\n      {\n        // textnode\n        var nodeText = node.nodeValue.toString();\n        /* istanbul ignore else */\n\n        if (/^\\s+$/.test(nodeText)) {\n          return null;\n        }\n        /* istanbul ignore next */\n\n\n        if (!node.parentNode) {\n          return nodeText;\n        }\n\n        var parentNodeName = node.parentNode.nodeName.toLowerCase();\n\n        if (noTextChildNodes.indexOf(parentNodeName) !== -1) {\n          /* istanbul ignore else */\n          if (/\\S/.test(nodeText)) {\n            // eslint-disable-next-line no-console\n            console.warn(\"A textNode is not allowed inside '\" + parentNodeName + \"'. Your text \\\"\" + nodeText + \"\\\" will be ignored\");\n          }\n\n          return null;\n        }\n\n        return nodeText;\n      }\n\n    case 8:\n      {\n        // html-comment\n        return null;\n      }\n\n    /* istanbul ignore next */\n\n    default:\n      {\n        return null;\n      }\n  }\n}\nexport function convertFromString(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!input || typeof input !== 'string') {\n    return null;\n  }\n\n  var _a = options.nodeOnly,\n      nodeOnly = _a === void 0 ? false : _a,\n      _b = options.selector,\n      selector = _b === void 0 ? 'body > *' : _b,\n      _c = options.type,\n      type = _c === void 0 ? 'text/html' : _c;\n\n  try {\n    var parser = new DOMParser();\n    var doc = parser.parseFromString(input, type);\n    var node = doc.querySelector(selector);\n\n    if (!(node instanceof Node)) {\n      throw new Error('Error parsing input');\n    }\n\n    if (nodeOnly) {\n      return node;\n    }\n\n    return convertFromNode(node, options);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  }\n\n  return null;\n}\nexport default function convert(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof input === 'string') {\n    return convertFromString(input, options);\n  }\n\n  if (input instanceof Node) {\n    return convertFromNode(input, options);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\nimport { noTextChildNodes, possibleStandardNames, styleToObject } from './helpers';\nfunction parseAttributes(node, reactKey) {\n    var attributes = {\n        key: reactKey,\n    };\n    /* istanbul ignore else */\n    if (node instanceof Element) {\n        var nodeClassNames = node.getAttribute('class');\n        if (nodeClassNames) {\n            attributes.className = nodeClassNames;\n        }\n        __spread(node.attributes).forEach(function (d) {\n            switch (d.name) {\n                // these are manually handled above, so break;\n                case 'class':\n                    break;\n                case 'style':\n                    attributes[d.name] = styleToObject(d.value);\n                    break;\n                case 'checked':\n                case 'disabled':\n                case 'selected':\n                case 'autoplay':\n                case 'controls':\n                    attributes[d.name] = d.name;\n                    break;\n                default:\n                    attributes[possibleStandardNames[d.name] || d.name] = d.value;\n            }\n        });\n    }\n    return attributes;\n}\nfunction parseChildren(childNodeList, level, options) {\n    var children = __spread(childNodeList).map(function (node, index) {\n        return convertFromNode(node, __assign(__assign({}, options), { index: index, level: level + 1 }));\n    })\n        .filter(Boolean);\n    if (!children.length) {\n        return null;\n    }\n    return children;\n}\nfunction parseName(nodeName) {\n    if (/[a-z]+[A-Z]+[a-z]+/.test(nodeName)) {\n        return nodeName;\n    }\n    return nodeName.toLowerCase();\n}\nexport function convertFromNode(input, options) {\n    if (options === void 0) { options = {}; }\n    if (!input || !(input instanceof Node)) {\n        return null;\n    }\n    var _a = options.actions, actions = _a === void 0 ? [] : _a, _b = options.index, index = _b === void 0 ? 0 : _b, _c = options.level, level = _c === void 0 ? 0 : _c;\n    var node = input;\n    var key = level + \"-\" + index;\n    var result = [];\n    /* istanbul ignore else */\n    if (Array.isArray(actions)) {\n        actions.forEach(function (action) {\n            if (action.condition(node, key, level)) {\n                if (typeof action.pre === 'function') {\n                    node = action.pre(node, key, level);\n                    if (!(node instanceof Node)) {\n                        node = input;\n                        /* istanbul ignore else */\n                        if (process.env.NODE_ENV !== 'production') {\n                            // eslint-disable-next-line no-console\n                            console.warn('The `pre`-method always must return a valid DomNode (instanceof Node) - your modification will be ignored (Hint: if you want to render a React-component, use the `action`-method instead)');\n                        }\n                    }\n                }\n                if (typeof action.post === 'function') {\n                    result.push(action.post(node, key, level));\n                }\n            }\n        });\n    }\n    if (result.length) {\n        return result;\n    }\n    switch (node.nodeType) {\n        case 1: {\n            // regular dom-node\n            return React.createElement(parseName(node.nodeName), parseAttributes(node, key), parseChildren(node.childNodes, level, options));\n        }\n        case 3: {\n            // textnode\n            var nodeText = node.nodeValue.toString();\n            /* istanbul ignore else */\n            if (/^\\s+$/.test(nodeText)) {\n                return null;\n            }\n            /* istanbul ignore next */\n            if (!node.parentNode) {\n                return nodeText;\n            }\n            var parentNodeName = node.parentNode.nodeName.toLowerCase();\n            if (noTextChildNodes.indexOf(parentNodeName) !== -1) {\n                /* istanbul ignore else */\n                if (/\\S/.test(nodeText)) {\n                    // eslint-disable-next-line no-console\n                    console.warn(\"A textNode is not allowed inside '\" + parentNodeName + \"'. Your text \\\"\" + nodeText + \"\\\" will be ignored\");\n                }\n                return null;\n            }\n            return nodeText;\n        }\n        case 8: {\n            // html-comment\n            return null;\n        }\n        /* istanbul ignore next */\n        default: {\n            return null;\n        }\n    }\n}\nexport function convertFromString(input, options) {\n    if (options === void 0) { options = {}; }\n    if (!input || typeof input !== 'string') {\n        return null;\n    }\n    var _a = options.nodeOnly, nodeOnly = _a === void 0 ? false : _a, _b = options.selector, selector = _b === void 0 ? 'body > *' : _b, _c = options.type, type = _c === void 0 ? 'text/html' : _c;\n    try {\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(input, type);\n        var node = doc.querySelector(selector);\n        if (!(node instanceof Node)) {\n            throw new Error('Error parsing input');\n        }\n        if (nodeOnly) {\n            return node;\n        }\n        return convertFromNode(node, options);\n    }\n    catch (error) {\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.error(error);\n        }\n    }\n    return null;\n}\nexport default function convert(input, options) {\n    if (options === void 0) { options = {}; }\n    if (typeof input === 'string') {\n        return convertFromString(input, options);\n    }\n    if (input instanceof Node) {\n        return convertFromNode(input, options);\n    }\n    return null;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}